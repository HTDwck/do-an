"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { MessageCircle, X, Send, Bot, User } from "lucide-react"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"

interface Message {
  id: string
  text: string
  sender: "user" | "bot"
  timestamp: Date
  services?: any[]
}

const SERVICES = [
  { id: "bath", name: "T·∫Øm th√∫ c∆∞ng", price: 80000, duration: "1 gi·ªù" },
  { id: "grooming", name: "C·∫Øt t·ªâa l√¥ng", price: 120000, duration: "1.5 gi·ªù" },
  { id: "health", name: "Ki·ªÉm tra s·ª©c kh·ªèe", price: 150000, duration: "30 ph√∫t" },
  { id: "nail", name: "C·∫Øt m√≥ng", price: 50000, duration: "30 ph√∫t" },
]

const QUICK_ACTIONS = [
  { id: "services", label: "Xem d·ªãch v·ª•", icon: "üêï" },
  { id: "booking", label: "ƒê·∫∑t l·ªãch", icon: "üìÖ" },
  { id: "contact", label: "Li√™n h·ªá", icon: "üìû" },
  { id: "location", label: "ƒê·ªãa ch·ªâ", icon: "üìç" },
]

interface AIChatWidgetProps {
  onBookingRequest?: () => void
}

export function AIChatWidget({ onBookingRequest }: AIChatWidgetProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      text: "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa Pet Care. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ d·ªãch v·ª•, ƒë·∫∑t l·ªãch h·∫πn, ho·∫∑c tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ chƒÉm s√≥c th√∫ c∆∞ng. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?",
      sender: "bot",
      timestamp: new Date(),
    },
  ])
  const [inputText, setInputText] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const generateAIResponse = async (userMessage: string) => {
    try {
      // Check if we have an API key in the environment
      const apiKey = process.env.OPENAI_API_KEY

      if (!apiKey) {
        // If no API key, use the fallback response generator
        return generateFallbackResponse(userMessage)
      }

      const context = `
      B·∫°n l√† tr·ª£ l√Ω AI c·ªßa Pet Care - d·ªãch v·ª• chƒÉm s√≥c th√∫ c∆∞ng t·∫°i Vi·ªát Nam.
      
      Th√¥ng tin v·ªÅ d·ªãch v·ª•:
      - T·∫Øm th√∫ c∆∞ng: 80,000ƒë (1 gi·ªù)
      - C·∫Øt t·ªâa l√¥ng: 120,000ƒë (1.5 gi·ªù) 
      - Ki·ªÉm tra s·ª©c kh·ªèe: 150,000ƒë (30 ph√∫t)
      - C·∫Øt m√≥ng: 50,000ƒë (30 ph√∫t)
      
      Th√¥ng tin li√™n h·ªá:
      - ƒê·ªãa ch·ªâ: 39 H·ªì T√πng M·∫≠u, H√† N·ªôi
      - Hotline: 0914219420
      - Gi·ªù l√†m vi·ªác: 8:00 - 18:00 (Th·ª© 2 - Th·ª© 7)
      
      H√£y tr·∫£ l·ªùi m·ªôt c√°ch th√¢n thi·ªán, chuy√™n nghi·ªáp v√† h·ªØu √≠ch. N·∫øu kh√°ch h√†ng h·ªèi v·ªÅ ƒë·∫∑t l·ªãch, h√£y khuy·∫øn kh√≠ch h·ªç s·ª≠ d·ª•ng t√≠nh nƒÉng ƒë·∫∑t l·ªãch tr√™n website.
      `

      const { text } = await generateText({
        model: openai("gpt-3.5-turbo", { apiKey }),
        messages: [
          { role: "system", content: context },
          { role: "user", content: userMessage },
        ],
      })

      return text
    } catch (error) {
      console.error("AI Error:", error)
      return generateFallbackResponse(userMessage)
    }
  }

  // Add this new function for fallback responses
  const generateFallbackResponse = (userMessage: string) => {
    const message = userMessage.toLowerCase()

    // Check for common questions and provide appropriate responses
    if (message.includes("gi√°") || message.includes("ph√≠") || message.includes("ti·ªÅn")) {
      return `D·ªãch v·ª• c·ªßa ch√∫ng t√¥i c√≥ c√°c m·ª©c gi√° nh∆∞ sau:
- T·∫Øm th√∫ c∆∞ng: 80,000ƒë (1 gi·ªù)
- C·∫Øt t·ªâa l√¥ng: 120,000ƒë (1.5 gi·ªù) 
- Ki·ªÉm tra s·ª©c kh·ªèe: 150,000ƒë (30 ph√∫t)
- C·∫Øt m√≥ng: 50,000ƒë (30 ph√∫t)

B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·ªãch ngay tr√™n website ho·∫∑c li√™n h·ªá hotline 0914219420 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n th√™m.`
    }

    if (message.includes("ƒë·∫∑t l·ªãch") || message.includes("h·∫πn") || message.includes("booking")) {
      return "ƒê·ªÉ ƒë·∫∑t l·ªãch, b·∫°n c√≥ th·ªÉ nh·∫•n v√†o n√∫t 'ƒê·∫∑t l·ªãch ngay' ·ªü ƒë·∫ßu trang ho·∫∑c g·ªçi hotline 0914219420. Khi ƒë·∫∑t l·ªãch, b·∫°n c·∫ßn cung c·∫•p th√¥ng tin v·ªÅ th√∫ c∆∞ng v√† ch·ªçn d·ªãch v·ª• ph√π h·ª£p. B·∫°n mu·ªën ƒë·∫∑t l·ªãch cho d·ªãch v·ª• n√†o?"
    }

    if (message.includes("ƒë·ªãa ch·ªâ") || message.includes("c·ª≠a h√†ng") || message.includes("·ªü ƒë√¢u")) {
      return "C·ª≠a h√†ng Pet Care t·ªça l·∫°c t·∫°i ƒë·ªãa ch·ªâ: 39 H·ªì T√πng M·∫≠u, H√† N·ªôi. Ch√∫ng t√¥i m·ªü c·ª≠a t·ª´ 8:00 - 18:00 (Th·ª© 2 - Th·ª© 7), ngh·ªâ Ch·ªß nh·∫≠t."
    }

    if (
      message.includes("li√™n h·ªá") ||
      message.includes("hotline") ||
      message.includes("ƒëi·ªán tho·∫°i") ||
      message.includes("g·ªçi")
    ) {
      return "B·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi ch√∫ng t√¥i qua hotline: 0914219420 ho·∫∑c email: info@petcare.vn. Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n!"
    }

    if (message.includes("ch√≥") || message.includes("dog")) {
      return "Ch√∫ng t√¥i cung c·∫•p ƒë·∫ßy ƒë·ªß c√°c d·ªãch v·ª• chƒÉm s√≥c cho ch√≥ nh∆∞ t·∫Øm, c·∫Øt t·ªâa l√¥ng, ki·ªÉm tra s·ª©c kh·ªèe v√† c·∫Øt m√≥ng. M·ªói gi·ªëng ch√≥ s·∫Ω ƒë∆∞·ª£c chƒÉm s√≥c theo c√°ch ph√π h·ª£p nh·∫•t v·ªõi ƒë·∫∑c ƒëi·ªÉm c·ªßa gi·ªëng."
    }

    if (message.includes("m√®o") || message.includes("cat")) {
      return "D·ªãch v·ª• chƒÉm s√≥c m√®o c·ªßa ch√∫ng t√¥i ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·∫∑c bi·ªát ƒë·ªÉ ph√π h·ª£p v·ªõi ƒë·∫∑c t√≠nh c·ªßa m√®o. Ch√∫ng t√¥i c√≥ nh√¢n vi√™n ƒë∆∞·ª£c ƒë√†o t·∫°o chuy√™n bi·ªát v·ªÅ h√†nh vi v√† nhu c·∫ßu c·ªßa m√®o."
    }

    if (message.includes("c·∫£m ∆°n") || message.includes("thank")) {
      return "Kh√¥ng c√≥ g√¨! Pet Care lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n v√† th√∫ c∆∞ng. N·∫øu c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o kh√°c, ƒë·ª´ng ng·∫°i li√™n h·ªá v·ªõi ch√∫ng t√¥i nh√©!"
    }

    if (message.includes("xin ch√†o") || message.includes("hello") || message.includes("hi")) {
      return "Xin ch√†o! R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n. T√¥i l√† tr·ª£ l√Ω AI c·ªßa Pet Care. B·∫°n c·∫ßn t∆∞ v·∫•n v·ªÅ d·ªãch v·ª• n√†o cho th√∫ c∆∞ng?"
    }

    // Default response if no specific pattern is matched
    return `C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v·ªõi Pet Care. Ch√∫ng t√¥i cung c·∫•p c√°c d·ªãch v·ª• chƒÉm s√≥c th√∫ c∆∞ng chuy√™n nghi·ªáp bao g·ªìm t·∫Øm g·ªôi, c·∫Øt t·ªâa l√¥ng, ki·ªÉm tra s·ª©c kh·ªèe v√† c·∫Øt m√≥ng.

B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·ªãch tr·ª±c ti·∫øp tr√™n website ho·∫∑c g·ªçi hotline 0914219420. N·∫øu b·∫°n c√≥ c√¢u h·ªèi c·ª• th·ªÉ v·ªÅ d·ªãch v·ª•, gi√° c·∫£ ho·∫∑c c√°ch chƒÉm s√≥c th√∫ c∆∞ng, h√£y cho t√¥i bi·∫øt ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt h∆°n.`
  }

  const sendMessage = async () => {
    if (!inputText.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText,
      sender: "user",
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInputText("")
    setIsLoading(true)

    // Generate AI response
    const aiResponse = await generateAIResponse(inputText)

    const botMessage: Message = {
      id: (Date.now() + 1).toString(),
      text: aiResponse,
      sender: "bot",
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, botMessage])
    setIsLoading(false)
  }

  const handleQuickAction = (actionId: string) => {
    let responseText = ""
    let services: any[] = []

    switch (actionId) {
      case "services":
        responseText = "ƒê√¢y l√† c√°c d·ªãch v·ª• chƒÉm s√≥c th√∫ c∆∞ng c·ªßa ch√∫ng t√¥i:"
        services = SERVICES
        break
      case "booking":
        responseText =
          "ƒê·ªÉ ƒë·∫∑t l·ªãch h·∫πn, b·∫°n c√≥ th·ªÉ click v√†o n√∫t 'ƒê·∫∑t l·ªãch ngay' ·ªü ƒë·∫ßu trang ho·∫∑c t√¥i c√≥ th·ªÉ h∆∞·ªõng d·∫´n b·∫°n qua c√°c b∆∞·ªõc ƒë·∫∑t l·ªãch. B·∫°n mu·ªën ƒë·∫∑t l·ªãch cho d·ªãch v·ª• n√†o?"
        if (onBookingRequest) onBookingRequest()
        break
      case "contact":
        responseText =
          "Th√¥ng tin li√™n h·ªá:\nüìû Hotline: 0914219420\nüìß Email: info@petcare.vn\nüïí Gi·ªù l√†m vi·ªác: 8:00 - 18:00 (T2-T7)"
        break
      case "location":
        responseText =
          "üìç ƒê·ªãa ch·ªâ c·ª≠a h√†ng: 39 H·ªì T√πng M·∫≠u, H√† N·ªôi\nüöó Ch√∫ng t√¥i c√≥ ch·ªó ƒë·∫≠u xe mi·ªÖn ph√≠\nüöå G·∫ßn c√°c tuy·∫øn xe bus: 03, 18, 23"
        break
    }

    const botMessage: Message = {
      id: Date.now().toString(),
      text: responseText,
      sender: "bot",
      timestamp: new Date(),
      services: services.length > 0 ? services : undefined,
    }

    setMessages((prev) => [...prev, botMessage])
  }

  const handleServiceSelect = (service: any) => {
    const responseText = `B·∫°n ƒë√£ ch·ªçn d·ªãch v·ª• "${service.name}". 
    
üí∞ Gi√°: ${service.price.toLocaleString()}ƒë
‚è∞ Th·ªùi gian: ${service.duration}

B·∫°n c√≥ mu·ªën ƒë·∫∑t l·ªãch cho d·ªãch v·ª• n√†y kh√¥ng? T√¥i c√≥ th·ªÉ h∆∞·ªõng d·∫´n b·∫°n qua c√°c b∆∞·ªõc ƒë·∫∑t l·ªãch.`

    const botMessage: Message = {
      id: Date.now().toString(),
      text: responseText,
      sender: "bot",
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, botMessage])
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      sendMessage()
    }
  }

  return (
    <>
      {/* Chat Toggle Button */}
      <Button
        onClick={() => setIsOpen(!isOpen)}
        className="fixed bottom-6 right-6 z-50 w-14 h-14 rounded-full bg-cyan-600 hover:bg-cyan-700 shadow-lg"
        size="icon"
      >
        {isOpen ? <X className="w-6 h-6" /> : <MessageCircle className="w-6 h-6" />}
      </Button>

      {/* Chat Window */}
      {isOpen && (
        <Card className="fixed bottom-24 right-6 z-40 w-80 h-[500px] shadow-xl">
          <CardHeader className="bg-cyan-600 text-white rounded-t-lg p-4">
            <CardTitle className="flex items-center gap-2 text-sm">
              <Bot className="w-4 h-4" />
              Tr·ª£ l√Ω AI Pet Care
              <div className="ml-auto w-2 h-2 bg-green-400 rounded-full"></div>
            </CardTitle>
          </CardHeader>
          <CardContent className="p-0 flex flex-col h-[440px]">
            {/* Quick Actions */}
            <div className="p-3 border-b bg-gray-50">
              <div className="grid grid-cols-2 gap-2">
                {QUICK_ACTIONS.map((action) => (
                  <Button
                    key={action.id}
                    variant="outline"
                    size="sm"
                    onClick={() => handleQuickAction(action.id)}
                    className="text-xs h-8"
                  >
                    <span className="mr-1">{action.icon}</span>
                    {action.label}
                  </Button>
                ))}
              </div>
            </div>

            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-3">
              {messages.map((message) => (
                <div key={message.id}>
                  <div className={`flex ${message.sender === "user" ? "justify-end" : "justify-start"}`}>
                    <div
                      className={`max-w-[85%] p-3 rounded-lg ${
                        message.sender === "user" ? "bg-cyan-600 text-white" : "bg-gray-100 text-gray-800"
                      }`}
                    >
                      <div className="flex items-start gap-2">
                        {message.sender === "bot" && <Bot className="w-4 h-4 mt-0.5 flex-shrink-0" />}
                        <p className="text-sm whitespace-pre-line">{message.text}</p>
                        {message.sender === "user" && <User className="w-4 h-4 mt-0.5 flex-shrink-0" />}
                      </div>
                    </div>
                  </div>

                  {/* Service Cards */}
                  {message.services && (
                    <div className="mt-2 space-y-2">
                      {message.services.map((service) => (
                        <Card
                          key={service.id}
                          className="cursor-pointer hover:shadow-md transition-shadow"
                          onClick={() => handleServiceSelect(service)}
                        >
                          <CardContent className="p-3">
                            <div className="flex justify-between items-center">
                              <div>
                                <h4 className="font-semibold text-sm">{service.name}</h4>
                                <p className="text-xs text-gray-600">{service.duration}</p>
                              </div>
                              <Badge variant="secondary">{service.price.toLocaleString()}ƒë</Badge>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  )}
                </div>
              ))}

              {isLoading && (
                <div className="flex justify-start">
                  <div className="bg-gray-100 p-3 rounded-lg">
                    <div className="flex items-center gap-2">
                      <Bot className="w-4 h-4" />
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                        <div
                          className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                          style={{ animationDelay: "0.1s" }}
                        ></div>
                        <div
                          className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                          style={{ animationDelay: "0.2s" }}
                        ></div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              <div ref={messagesEndRef} />
            </div>

            {/* Input */}
            <div className="p-4 border-t">
              <div className="flex gap-2">
                <input
                  type="text"
                  value={inputText}
                  onChange={(e) => setInputText(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Nh·∫≠p tin nh·∫Øn..."
                  disabled={isLoading}
                  className="flex-1 px-3 py-2 border rounded-md focus:ring-2 focus:ring-cyan-500 focus:border-transparent text-sm disabled:opacity-50"
                />
                <Button
                  onClick={sendMessage}
                  size="sm"
                  className="bg-cyan-600 hover:bg-cyan-700"
                  disabled={isLoading || !inputText.trim()}
                >
                  <Send className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </>
  )
}
